
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ
import dj_database_url

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = 'RENDER' not in os.environ
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "107.167.190.163",
    '10.140.0.2',
    'red-cr6199bv2p9s73akv6g0',
    'gridtrader-backend.onrender.com',
    '34.143.221.217',
    'gridtrader-frontend.onrender.com',
    'localhost:8000',
    '127.0.0.1:8000',
    '107.167.190.163:8000',
    '10.140.0.2:8000',
    'gridtrade.one',
    'www.gridtrade.one',
    '35.206.238.121'
]

RENDER_EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")

if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition
CUSTOM_APPS = [
    "binanaceAccount.apps.BinanaceaccountConfig",
    "binanceData.apps.BinancedataConfig",
    "llm.apps.LlmConfig",
    "TradeLog.apps.TradelogConfig",
    "TradeStrategy.apps.TradestrategyConfig",
    "common.apps.CommonConfig",
    "users.apps.UsersConfig",
    "scalping.apps.ScalpingConfig"
]

SYSTEM_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "corsheaders",
    'django_json_widget',
    'django_q',
    'channels',
]
# 'django_q',

INSTALLED_APPS = SYSTEM_APPS + THIRD_PARTY_APPS + CUSTOM_APPS

REDIS_URL = "rediss://red-cr6199bv2p9s73akv6g0:m8pIqsoIuvbXvsKTXUVK98uJJB8vSC7Z@singapore-redis.render.com:6379"
REDIS_HOST = 'singapore-redis.render.com'
REDIS_PORT = 6379

Q_CLUSTER = {
    'name': 'bitcoinanace_task_cluster',  # 클러스터의 고유 이름
    'workers': 4,  # 동시에 실행할 작업자(worker) 수
    'recycle': 500,  # 작업자가 이 개수만큼의 작업을 처리한 후 재시작됨
    'timeout': 500,  # 작업의 최대 실행 시간(초). 이 시간을 초과하면 작업이 중단됨
    'compress': True,  # 작업 데이터를 압축하여 저장
    'cpu_affinity': 1,  # 각 작업자를 특정 CPU 코어에 할당 (1은 모든 코어 사용)
    'save_limit': 250,  # 결과를 저장할 최대 작업 수
    'queue_limit': 30,  # 대기열에 넣을 수 있는 최대 작업 수
    'label': 'Django Q',  # 관리자 인터페이스에 표시될 레이블
    'redis': REDIS_URL,
    'retry': 3,  # 작업이 실패할 경우 최대 3번 재시도
    'retry_delay': 10,  # 재시도 사이의 지연 시간(초)
}
# Q_CLUSTER = {
#     'name': 'bitcoinanace_task_cluster',  # 클러스터의 고유 이름
#     'workers': 4,  # 동시에 실행할 작업자(worker) 수
#     'recycle': 500,  # 작업자가 이 개수만큼의 작업을 처리한 후 재시작됨
#     'timeout': 60,  # 작업의 최대 실행 시간(초). 이 시간을 초과하면 작업이 중단됨
#     'compress': True,  # 작업 데이터를 압축하여 저장
#     'cpu_affinity': 1,  # 각 작업자를 특정 CPU 코어에 할당 (1은 모든 코어 사용)
#     'save_limit': 250,  # 결과를 저장할 최대 작업 수
#     'queue_limit': 30,  # 대기열에 넣을 수 있는 최대 작업 수
#     'label': 'Django Q',  # 관리자 인터페이스에 표시될 레이블
#     'redis': {
#         'host': '127.0.0.1',  # Redis 서버의 호스트 주소
#         'port': 6379,  # Redis 서버의 포트 번호
#         'db': 0,  # 사용할 Redis 데이터베이스 번호
#     }
# }


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django_q': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'binanaceAccount': {  # 여기에 귀하의 앱 이름을 넣으세요
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

CORS_ALLOWED_ORIGINS = ['http://107.167.190.163:8000',
                        'https://107.167.190.163:8000',
                        'http://10.140.0.2:8000',
                        'https://10.140.0.2:8000',
                        "http://localhost:3000",
                        "http://127.0.0.1:3000",
                        'http://127.0.0.1:8000',
                        'https://35.247.191.93:5000',
                        'http://35.247.191.93:5000',
                        'http://34.143.221.217',
                        'https://gridtrader-frontend.onrender.com',
                        'https://gridtrade.one',
                        ]

CSRF_TRUSTED_ORIGINS = ['http://107.167.190.163:8000',
                        'https://107.167.190.163:8000',
                        'http://10.140.0.2:8000',
                        'https://10.140.0.2:8000',
                        "http://localhost:3000",
                        "http://127.0.0.1:3000",
                        'http://127.0.0.1:8000',
                        'https://35.247.191.93:5000',
                        'http://35.247.191.93:5000',
                        'http://34.143.221.217',
                        'https://gridtrader-frontend.onrender.com',
                        'https://gridtrade.one',
                        ]

# 개발 환경에서는 이 값들을 False로 설정할 수 있습니다
# CSRF_COOKIE_SECURE = False
# SESSION_COOKIE_SECURE = False
#
# # 쿠키 도메인 설정 (필요한 경우)
# CSRF_COOKIE_DOMAIN = None  # 또는 '.yourdomain.com'과 같이 설정
# CORS_ALLOW_CREDENTIALS = True

# 도메인 사야한데 ssl/tls 인증서받고
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
# SECURE_SSL_REDIRECT = not DEBUG
SECURE_SSL_REDIRECT = False

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


CORS_ALLOW_CREDENTIALS = True
CSRF_USE_SESSIONS = True


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
if DEBUG:
    DATABASES = {
        'default': dj_database_url.config(
            # Replace this value with your local database's connection string.
            default='postgresql://hanvit:fpf0LlljqMQ8M5vOuU96rBaRycZJSmoT@dpg-cr61es3tq21c73b7p1ag-a.singapore-postgres.render.com/gridtrader',
            conn_max_age=600
        ),
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
    }
else:
    DATABASES = {
        'default': dj_database_url.config(
            # Replace this value with your local database's connection string.
            default='postgresql://hanvit:fpf0LlljqMQ8M5vOuU96rBaRycZJSmoT@dpg-cr61es3tq21c73b7p1ag-a.singapore-postgres.render.com/gridtrader',
            conn_max_age=600
        ),
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
    }

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"{REDIS_URL}/0",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SSL': True,
        }
    },
    'logSession': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"{REDIS_URL}/1",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SSL': True,
        }
    },
    'account': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"{REDIS_URL}/2",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SSL': True,

        }
    },
}

ASGI_APPLICATION = 'config.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    },
}

# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/0',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     },
#     'logSession': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     },
#     'account': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/2',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     },
#     'llm': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/3',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     },
# }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

# This production code might break development mode, so we check whether we're in DEBUG mode
if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SECRET_KEY = env("SECRET_KEY")

BINANCE_API_KEY = env("BINANCE_API_KEY")
BINANCE_API_SECRET = env("BINANCE_API_SECRET")
OPENAI_API_KEY = env("OPENAI_API_KEY")
OPENAI_MODEL_NAME = env("OPENAI_MODEL_NAME")
SYMBOL = "BNBUSDT"
